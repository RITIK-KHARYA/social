// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  username  String?  @unique
  name      String
  email     String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String?
  header    String?
  bio       String?
  location  String?
  dateJoined DateTime @default(now())
  posts     Post[]  
  likes     Like[]    
  bookmarks Bookmark[] 
  comments  Comment[]
  notifications Notification[]
  followers Follow[] @relation("UserFollowers")
  followings Follow[] @relation("UserFollowings")

}

model Post { 
   id        String      @id @default(uuid())
  content     String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
  likes       Like[]    
  bookmarks  Bookmark[]   
  comments    Comment[] 

}

model Like {
  id        String      @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId     String
  post       Post     @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId     String
  createdAt   DateTime @default(now())
}

model Bookmark {
  id        String      @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId     String
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
  createdAt   DateTime @default(now())
}

model Comment {
   id        String      @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
  content    String
  createdAt   DateTime @default(now())
}

model Notification {
   id        String      @id @default(uuid())
  user       User    @relation(fields: [userid], references: [id])
  userid     String
  toUserId    String
  content    String
  createdAt  DateTime @default(now())
}

model Follow {
  id        String  @id @default(uuid())
  follower  User    @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  following User   @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt DateTime @default(now())
}


